{"version":3,"sources":["context/features/cities/citiesSlice.ts","components/CitiesList/CitiesList.tsx","components/CityBar/CityBar.tsx","context/features/weatherInfo/weatherInfoSlice.ts","saga/index.ts","components/WeatherSection/WeatherSection.tsx","components/Root/Root.tsx","context/store.ts","index.tsx"],"names":["citiesSlice","createSlice","name","initialState","reducers","addCity","state","action","push","payload","removeCity","filter","city","actions","selectCities","cities","CitiesList","handleListItemClick","selectedCity","useSelector","dispatch","useDispatch","List","length","map","ListItem","button","selected","onClick","ListItemAvatar","Avatar","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","handleClickRemove","Alert","severity","CityBar","useState","error","setError","ref","useRef","Grid","container","spacing","item","xs","sm","TextField","fullWidth","id","label","defaultValue","helperText","variant","inputRef","Button","color","value","current","includes","weatherInfoSlice","description","icon","main","fetchData","resetData","selectWeatherInfo","weatherInfo","sync","rootSaga","sagaActions","callAPI","a","axios","get","process","call","result","put","data","weather","delay","message","cancelled","fork","syncTask","take","cancel","takeEvery","WeatherSection","useEffect","type","Typography","gutterBottom","component","src","alt","CircularProgress","useStyles","makeStyles","theme","marginTop","card","Root","classes","React","setSelectedCity","className","AppBar","position","Toolbar","noWrap","Container","maxWidth","Card","CardContent","prev","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","thunk","store","configureStore","reducer","citiesReducer","weatherInfoReducer","run","saga","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"8TAOaA,EAAcC,YAAY,CACnCC,KAAM,SACNC,aAJ8B,CAAC,SAAU,YAKzCC,SAAU,CACNC,QAAS,SAACC,EAAOC,GACbD,EAAME,KAAKD,EAAOE,QAAQP,OAE9BQ,WAAY,SAACJ,EAAOC,GAChB,OAAOD,EAAMK,QAAO,SAACC,GAAD,OAAUA,IAASL,EAAOE,QAAQP,Y,EAK3BF,EAAYa,QAApCR,E,EAAAA,QAASK,E,EAAAA,WAEXI,EAAe,SAACR,GAAD,OAAsBA,EAAMS,QAEzCf,IAAf,Q,+BCuCegB,MA5Cf,YAAmE,IAA7CC,EAA4C,EAA5CA,oBAAqBC,EAAuB,EAAvBA,aACjCH,EAASI,YAAYL,GACrBM,EAAWC,cASjB,OACI,cAACC,EAAA,EAAD,UACKP,EAAOQ,OAAS,EACbR,EAAOS,KAAI,SAACZ,GAAD,OACP,eAACa,EAAA,EAAD,CACIC,QAAM,EACNC,SAAUT,IAAiBN,EAC3BgB,QAAS,kBAAMX,EAAoBL,IAHvC,UAMI,cAACiB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAAC,IAAD,QAGR,cAACC,EAAA,EAAD,CAAcC,QAASpB,IACvB,cAACqB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,KAAK,MACLP,QAAS,kBA1BX,SAAChB,GACnBA,IAASM,GACTD,EAAoB,MAExBG,EAASV,EAAW,CAAER,KAAMU,KAsBWwB,CAAkBxB,IAFrC,SAII,cAAC,IAAD,UAbHA,MAmBb,cAACyB,EAAA,EAAD,CAAOC,SAAS,OAAhB,8C,2BCJDC,MA9Cf,WACI,IAAMxB,EAASI,YAAYL,GACrBM,EAAWC,cAFF,EAGWmB,mBAAS,IAHpB,mBAGRC,EAHQ,KAGDC,EAHC,KAITC,EAAMC,iBAAgC,MAc5C,OACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACI,cAACC,EAAA,EAAD,CACIV,QAASA,EACTW,WAAS,EACTC,GAAG,6BACHC,MAAM,SACNC,aAAa,GACbC,WAAcf,GAAgB,GAC9BgB,QAAQ,WACRC,SAAUf,MAGlB,cAACE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACI,cAACS,EAAA,EAAD,CACIP,WAAS,EACTK,QAAQ,YACRG,MAAM,YACNhC,QA/BO,WAAO,IAAD,EACnBiC,EAAK,OAAGlB,QAAH,IAAGA,GAAH,UAAGA,EAAKmB,eAAR,aAAG,EAAcD,MACxBA,IACI9C,EAAOgD,SAASF,GAChBnB,EAAS,iCAETtB,EAASf,EAAQ,CAAEH,KAAM2D,KACzBnB,EAAS,OAoBT,gC,SCrBHsB,EAAmB/D,YAAY,CACxCC,KAAM,cACNC,aAVmC,CACnC8D,YAAa,GACbC,KAAM,GACNb,GAAI,EACJc,KAAM,GACN1B,MAAO,IAMPrC,SAAU,CACNgE,UAAW,SACP9D,EACAC,GACE,IAAD,EACuCA,EAAOE,QAAvCwD,EADP,EACOA,YAAaC,EADpB,EACoBA,KAAMb,EAD1B,EAC0BA,GAAIc,EAD9B,EAC8BA,KAC/B7D,EAAM2D,YAAcA,EACpB3D,EAAM4D,KAAOA,EACb5D,EAAM+C,GAAKA,EACX/C,EAAM6D,KAAOA,EACb7D,EAAMmC,MAAQ,IAElB4B,UAAW,SAAC/D,GACRA,EAAM2D,YAAc,GACpB3D,EAAM4D,KAAO,GACb5D,EAAM+C,GAAK,EACX/C,EAAM6D,KAAO,GACb7D,EAAMmC,MAAQ,IAElBC,SAAU,SAACpC,EAAOC,GACdD,EAAMmC,MAAQlC,EAAOE,Y,EAKiBuD,EAAiBnD,QAApDuD,E,EAAAA,UAAWC,E,EAAAA,UAAW3B,E,EAAAA,SAExB4B,EAAoB,SAAChE,GAAD,OAAsBA,EAAMiE,aAE9CP,IAAf,Q,uEClBUQ,I,YAcAL,I,YAOeM,IApCZC,GACH,OADGA,GAEE,Y,SAOAC,G,iFAAf,WAAuBzE,GAAvB,SAAA0E,EAAA,sEACiBC,IAAMC,IAAN,UACNC,kDADM,cAC6B7E,EAD7B,kBAC2C6E,qCAF5D,oF,sBAMA,SAAUP,GAAKtE,GAAf,uFAGyB,OAHzB,SAG+B8E,aAAK,kBAAML,GAAQzE,MAHlD,OAIY,OADI+E,EAHhB,gBAIkBC,YAAId,EAAUa,EAAOE,KAAKC,QAAQ,KAJpD,OAKY,OALZ,SAKkBC,YAbE,KAQpB,sDAQQ,OARR,oCAQcH,YAAIxC,GAAS,uCAAG4C,UAAW,mBARzC,QAUY,OAVZ,oBAUkBC,cAVlB,oCAU+B,OAV/B,UAUqCL,YAAIb,KAVzC,yFAcA,SAAUF,GAAV,4EACqB,OADJ1D,EAAjB,EAAiBA,QAAjB,SAC2B+E,YAAKhB,GAAM/D,EAAQP,MAD9C,OAGI,OAFMuF,EADV,gBAGUC,YAAKhB,IAHf,OAII,OAJJ,SAIUiB,YAAOF,GAJjB,wCAOe,SAAUhB,KAAV,iEACX,OADW,SACLmB,YAAUlB,GAAkBP,IADvB,wCCWA0B,OAvDf,YAA0C,IAAhB3F,EAAe,EAAfA,KAChBkB,EAAWC,cACXkD,EAAcpD,YAAYmD,GAShC,OAPAwB,qBAAU,WACN1E,EAAS,CAAE2E,KAAMrB,KACbxE,GACAkB,EAAS,CAAE2E,KAAMrB,GAAkBjE,QAAS,CAAEP,YAEnD,CAACA,EAAMkB,IAELlB,GAML,OAAIqE,QAAJ,IAAIA,OAAJ,EAAIA,EAAa9B,OAET,cAACJ,EAAA,EAAD,CAAOC,SAAS,QAAhB,2DAMJ,OAACiC,QAAD,IAACA,OAAD,EAACA,EAAaL,QAAQ,OAACK,QAAD,IAACA,OAAD,EAACA,EAAaJ,QAAQ,OAACI,QAAD,IAACA,OAAD,EAACA,EAAaN,aAK1D,qCACI,eAAC+B,EAAA,EAAD,CAAYpC,MAAM,gBAAgBqC,cAAY,EAA9C,wBACgB/F,KAEhB,cAAC8F,EAAA,EAAD,CAAYvC,QAAQ,KAAKyC,UAAU,OACnC,cAACF,EAAA,EAAD,CAAYpC,MAAM,gBAAlB,UACgB,OAAXW,QAAW,IAAXA,OAAA,EAAAA,EAAaL,OACV,qBACIiC,IAAG,kDAAsC5B,QAAtC,IAAsCA,OAAtC,EAAsCA,EAAaL,KAAnD,WACHkC,IAAI,aAIhB,eAACJ,EAAA,EAAD,CAAYvC,QAAQ,QAAQyC,UAAU,IAAtC,UACI,mDADJ,OAEK3B,QAFL,IAEKA,OAFL,EAEKA,EAAaN,eAElB,eAAC+B,EAAA,EAAD,CAAYvC,QAAQ,QAAQyC,UAAU,IAAtC,UACI,4CADJ,OAEK3B,QAFL,IAEKA,OAFL,EAEKA,EAAaJ,WAvBf,cAACkC,EAAA,EAAD,CAAkBzC,MAAM,cAb3B,cAACvB,EAAA,EAAD,CAAOC,SAAS,OAAhB,sDCXNgE,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrC1D,UAAW,CACP2D,UAAWD,EAAMzD,QAAQ,IAE7B2D,KAAM,CACFD,UAAWD,EAAMzD,QAAQ,QA6ClB4D,OAzCf,WACI,IAAMC,EAAUN,KADJ,EAE4BO,IAAMrE,SAAwB,MAF1D,mBAELtB,EAFK,KAES4F,EAFT,KAQZ,OACI,sBAAKC,UAAU,MAAf,UACI,cAACC,EAAA,EAAD,CAAQC,SAAS,WAAjB,SACI,cAACC,EAAA,EAAD,UACI,cAAClB,EAAA,EAAD,CAAYvC,QAAQ,KAAKG,MAAM,UAAUuD,QAAM,EAA/C,6BAKR,eAACC,EAAA,EAAD,CAAWC,SAAS,KAAKN,UAAWH,EAAQ9D,UAA5C,UACI,cAACwE,EAAA,EAAD,CAAMP,UAAWH,EAAQF,KAAzB,SACI,cAACa,EAAA,EAAD,UACI,cAAC,GAAD,CAAgBrH,KAAMgB,QAG9B,cAACoG,EAAA,EAAD,CAAMP,UAAWH,EAAQF,KAAzB,SACI,cAACa,EAAA,EAAD,UACI,cAAC,EAAD,QAGR,cAACD,EAAA,EAAD,CAAMP,UAAWH,EAAQF,KAAzB,SACI,cAACa,EAAA,EAAD,UACI,cAAC,EAAD,CACItG,oBA3BI,SAACL,GACzBkG,GAAgB,SAACU,GAAD,OAAWA,IAAS5G,EAAOA,EAAO,SA2B9BM,aAAcA,e,kBC/CtCuG,GAAiBC,eACfC,GAAU,uBAAOC,YAAqB,CAAEC,OAAO,KAArC,CAA+CJ,KAElDK,GAAQC,YAAe,CAChCC,QAAS,CACLjH,OAAQkH,EACR1D,YAAa2D,GAEjBP,gBAGJF,GAAeU,IAAIC,I,qBCVnBC,EAASC,OACL,cAAC,IAAMC,WAAP,UACI,eAAC,IAAD,CAAUT,MAAOA,GAAjB,UACI,cAACU,EAAA,EAAD,IACA,cAAC,GAAD,SAGRC,SAASC,eAAe,W","file":"static/js/main.4603c4a8.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from 'context/store';\r\n\r\ntype CitiesState = string[];\r\n\r\nconst initialState: CitiesState = ['London', 'Warszawa'];\r\n\r\nexport const citiesSlice = createSlice({\r\n    name: 'cities',\r\n    initialState,\r\n    reducers: {\r\n        addCity: (state, action: PayloadAction<{ name: string }>) => {\r\n            state.push(action.payload.name);\r\n        },\r\n        removeCity: (state, action: PayloadAction<{ name: string }>) => {\r\n            return state.filter((city) => city !== action.payload.name);\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addCity, removeCity } = citiesSlice.actions;\r\n\r\nexport const selectCities = (state: RootState) => state.cities;\r\n\r\nexport default citiesSlice.reducer;\r\n","import Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { removeCity, selectCities } from 'context/features/cities/citiesSlice';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\ntype Props = {\r\n    handleListItemClick: (city: string | null) => void;\r\n    selectedCity: string | null;\r\n};\r\n\r\nfunction CitiesList({ handleListItemClick, selectedCity }: Props) {\r\n    const cities = useSelector(selectCities);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClickRemove = (city: string) => {\r\n        if (city === selectedCity) {\r\n            handleListItemClick(null);\r\n        }\r\n        dispatch(removeCity({ name: city }));\r\n    };\r\n\r\n    return (\r\n        <List>\r\n            {cities.length > 0 ? (\r\n                cities.map((city) => (\r\n                    <ListItem\r\n                        button\r\n                        selected={selectedCity === city}\r\n                        onClick={() => handleListItemClick(city)}\r\n                        key={city}\r\n                    >\r\n                        <ListItemAvatar>\r\n                            <Avatar>\r\n                                <LocationCityIcon />\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText primary={city} />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton\r\n                                edge=\"end\"\r\n                                onClick={() => handleClickRemove(city)}\r\n                            >\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                ))\r\n            ) : (\r\n                <Alert severity=\"info\">Pusta lista dodaj nowe miasta</Alert>\r\n            )}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default CitiesList;\r\n","import Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { addCity, selectCities } from 'context/features/cities/citiesSlice';\r\nimport React, { useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction CityBar() {\r\n    const cities = useSelector(selectCities);\r\n    const dispatch = useDispatch();\r\n    const [error, setError] = useState('');\r\n    const ref = useRef<HTMLInputElement | null>(null);\r\n\r\n    const handleClickAdd = () => {\r\n        const value = ref?.current?.value;\r\n        if (value) {\r\n            if (cities.includes(value)) {\r\n                setError('to miasto juz jest na liscie');\r\n            } else {\r\n                dispatch(addCity({ name: value }));\r\n                setError('');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={1}>\r\n            <Grid item xs={12} sm={9}>\r\n                <TextField\r\n                    error={!!error}\r\n                    fullWidth\r\n                    id=\"standard-error-helper-text\"\r\n                    label=\"Miasto\"\r\n                    defaultValue=\"\"\r\n                    helperText={!!error ? error : ''}\r\n                    variant=\"outlined\"\r\n                    inputRef={ref}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12} sm={3}>\r\n                <Button\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={handleClickAdd}\r\n                >\r\n                    Dodaj miasto\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default CityBar;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from 'context/store';\r\n\r\ntype WeatherInfoState = {\r\n    description: string;\r\n    icon: string;\r\n    id: number;\r\n    main: string;\r\n    error: string;\r\n};\r\n\r\nconst initialState: WeatherInfoState = {\r\n    description: '',\r\n    icon: '',\r\n    id: 0,\r\n    main: '',\r\n    error: '',\r\n};\r\n\r\nexport const weatherInfoSlice = createSlice({\r\n    name: 'weatherInfo',\r\n    initialState,\r\n    reducers: {\r\n        fetchData: (\r\n            state,\r\n            action: PayloadAction<Omit<WeatherInfoState, 'error'>>\r\n        ) => {\r\n            const { description, icon, id, main } = action.payload;\r\n            state.description = description;\r\n            state.icon = icon;\r\n            state.id = id;\r\n            state.main = main;\r\n            state.error = '';\r\n        },\r\n        resetData: (state) => {\r\n            state.description = '';\r\n            state.icon = '';\r\n            state.id = 0;\r\n            state.main = '';\r\n            state.error = '';\r\n        },\r\n        setError: (state, action: PayloadAction<string>) => {\r\n            state.error = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { fetchData, resetData, setError } = weatherInfoSlice.actions;\r\n\r\nexport const selectWeatherInfo = (state: RootState) => state.weatherInfo;\r\n\r\nexport default weatherInfoSlice.reducer;\r\n","import axios from 'axios';\r\nimport {} from 'child_process';\r\nimport {\r\n    fetchData,\r\n    resetData,\r\n    setError,\r\n} from 'context/features/weatherInfo/weatherInfoSlice';\r\nimport {\r\n    call,\r\n    cancel,\r\n    cancelled,\r\n    delay,\r\n    fork,\r\n    put,\r\n    take,\r\n    takeEvery,\r\n} from 'redux-saga/effects';\r\n\r\nexport const sagaActions = {\r\n    SYNC: 'SYNC',\r\n    STOP_SYNC: 'STOP_SYNC',\r\n};\r\n\r\ntype ActionType = { payload: { name: string }; type: string };\r\n\r\nconst TEN_SECONDS = 10000;\r\n\r\nasync function callAPI(name: string) {\r\n    return await axios.get(\r\n        `${process.env.REACT_APP_API_URL}?q=${name}&appid=${process.env.REACT_APP_API_KEY}`\r\n    );\r\n}\r\n\r\nfunction* sync(name: string) {\r\n    try {\r\n        while (true) {\r\n            let result = yield call(() => callAPI(name));\r\n            yield put(fetchData(result.data.weather[0]));\r\n            yield delay(TEN_SECONDS);\r\n        }\r\n    } catch (e) {\r\n        yield put(setError(e?.message || 'city not found'));\r\n    } finally {\r\n        if (yield cancelled()) yield put(resetData());\r\n    }\r\n}\r\n\r\nfunction* main({ payload }: ActionType) {\r\n    const syncTask = yield fork(sync, payload.name);\r\n\r\n    yield take(sagaActions.STOP_SYNC);\r\n    yield cancel(syncTask);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield takeEvery(sagaActions.SYNC, main);\r\n}\r\n","import { CircularProgress } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { selectWeatherInfo } from 'context/features/weatherInfo/weatherInfoSlice';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { sagaActions } from 'saga';\r\n\r\ntype Props = { name: string | null };\r\n\r\nfunction WeatherSection({ name }: Props) {\r\n    const dispatch = useDispatch();\r\n    const weatherInfo = useSelector(selectWeatherInfo);\r\n\r\n    useEffect(() => {\r\n        dispatch({ type: sagaActions.STOP_SYNC });\r\n        if (name) {\r\n            dispatch({ type: sagaActions.SYNC, payload: { name } });\r\n        }\r\n    }, [name, dispatch]);\r\n\r\n    if (!name) {\r\n        return (\r\n            <Alert severity=\"info\">Zaznacz miasto aby zobaczyć pogode</Alert>\r\n        );\r\n    }\r\n\r\n    if (weatherInfo?.error) {\r\n        return (\r\n            <Alert severity=\"error\">\r\n                Brak informacji o pogodzie dla danego maista\r\n            </Alert>\r\n        );\r\n    }\r\n\r\n    if (!weatherInfo?.icon && !weatherInfo?.main && !weatherInfo?.description) {\r\n        return <CircularProgress color=\"secondary\" />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n                Pogoda dla {name}\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\"></Typography>\r\n            <Typography color=\"textSecondary\">\r\n                {weatherInfo?.icon && (\r\n                    <img\r\n                        src={`http://openweathermap.org/img/wn/${weatherInfo?.icon}@2x.png`}\r\n                        alt=\"pogoda\"\r\n                    />\r\n                )}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n                <strong>Description: </strong>\r\n                {weatherInfo?.description}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n                <strong>Main: </strong>\r\n                {weatherInfo?.main}\r\n            </Typography>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default WeatherSection;\r\n","import AppBar from '@material-ui/core/AppBar';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CitiesList from 'components/CitiesList';\r\nimport CityBar from 'components/CityBar';\r\nimport WeatherSection from 'components/WeatherSection';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    card: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nfunction Root() {\r\n    const classes = useStyles();\r\n    const [selectedCity, setSelectedCity] = React.useState<string | null>(null);\r\n\r\n    const handleListItemClick = (city: string | null) => {\r\n        setSelectedCity((prev) => (prev !== city ? city : null));\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"relative\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                        Weather app\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container maxWidth=\"sm\" className={classes.container}>\r\n                <Card className={classes.card}>\r\n                    <CardContent>\r\n                        <WeatherSection name={selectedCity} />\r\n                    </CardContent>\r\n                </Card>\r\n                <Card className={classes.card}>\r\n                    <CardContent>\r\n                        <CityBar />\r\n                    </CardContent>\r\n                </Card>\r\n                <Card className={classes.card}>\r\n                    <CardContent>\r\n                        <CitiesList\r\n                            handleListItemClick={handleListItemClick}\r\n                            selectedCity={selectedCity}\r\n                        />\r\n                    </CardContent>\r\n                </Card>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Root;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport citiesReducer from 'context/features/cities/citiesSlice';\r\nimport weatherInfoReducer from 'context/features/weatherInfo/weatherInfoSlice';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport saga from 'saga';\r\n\r\nlet sagaMiddleware = createSagaMiddleware();\r\nconst middleware = [...getDefaultMiddleware({ thunk: false }), sagaMiddleware];\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        cities: citiesReducer,\r\n        weatherInfo: weatherInfoReducer,\r\n    },\r\n    middleware,\r\n});\r\n\r\nsagaMiddleware.run(saga);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Root from 'components/Root';\r\nimport { store } from 'context/store';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <CssBaseline />\r\n            <Root />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}